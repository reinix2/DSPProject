import streamlit as st
import numpy as np
import soundfile as sf
import matplotlib.pyplot as plt
from scipy.signal import correlate

# Constants
SPEED_OF_SOUND = 343  # m/s

# Title
st.title("ðŸ”Š Direction-of-Arrival Estimation Using Microphone Array")

# File uploader
uploaded_file = st.file_uploader("Upload a stereo WAV file", type=["wav"])

# Microphone spacing input
mic_distance = st.number_input("Distance between microphones (in meters)", min_value=0.01, max_value=1.0, value=0.2, step=0.01)

if uploaded_file is not None:
    # Load audio
    audio, samplerate = sf.read(uploaded_file)

    # Ensure stereo input
    if audio.ndim != 2 or audio.shape[1] != 2:
        st.error("Please upload a stereo WAV file with exactly 2 channels (one for each mic).")
    else:
        mic1 = audio[:, 0]
        mic2 = audio[:, 1]

        # Cross-correlation
        corr = correlate(mic1, mic2, mode='full')
        lags = np.arange(-len(mic1) + 1, len(mic1))
        lag = lags[np.argmax(corr)]
        tdoa = lag / samplerate  # Time difference in seconds

        # Angle estimation
        max_tdoa = mic_distance / SPEED_OF_SOUND
        tdoa = np.clip(tdoa, -max_tdoa, max_tdoa)  # Ensure arccos input is in range
        angle_rad = np.arcsin(tdoa / max_tdoa)
        angle_deg = np.degrees(angle_rad)

        # Display results
        st.subheader("ðŸ“Š Results")
        st.write(f"**Time Difference of Arrival (TDOA):** {tdoa:.6f} seconds")
        st.write(f"**Estimated Angle of Arrival:** {angle_deg:.2f}Â°")

        # Polar plot
        fig = plt.figure(figsize=(5, 5))
        ax = fig.add_subplot(111, polar=True)
        ax.plot(np.radians(angle_deg), 1, 'ro', label=f'{angle_deg:.1f}Â°')
        ax.set_rmax(1.1)
        ax.set_rticks([])
        ax.set_theta_zero_location('N')
        ax.set_theta_direction(-1)
        ax.legend()
        st.pyplot(fig)

        # Optional: Plot waveform and correlation
        st.subheader("ðŸ“ˆ Cross-Correlation Plot")
        fig_corr, ax_corr = plt.subplots()
        ax_corr.plot(lags / samplerate, corr)
        ax_corr.set_xlabel("Lag (seconds)")
        ax_corr.set_ylabel("Correlation")
        st.pyplot(fig_corr)
